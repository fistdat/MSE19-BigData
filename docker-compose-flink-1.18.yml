version: '3.8'

services:
  # PostgreSQL Database with WAL enabled
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: demographics
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/
      - ./dataset:/var/lib/postgresql/data/dataset
    ports:
      - "5432:5432"
    command: |
      postgres
      -c wal_level=logical
      -c max_wal_senders=1
      -c max_replication_slots=1
      -c shared_preload_libraries=pgoutput
    networks:
      - data-lakehouse

  # Flink JobManager (1.18.3)
  jobmanager:
    build:
      context: ./flink
      dockerfile: Dockerfile.1.18
    container_name: jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 1
        sql-client.execution.result-mode: table
        web.submit.enable: true
        rest.flamegraph.enabled: true
    networks:
      - data-lakehouse

  # Flink TaskManager (1.18.3)
  taskmanager:
    build:
      context: ./flink
      dockerfile: Dockerfile.1.18
    container_name: taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 1
    networks:
      - data-lakehouse

  # MinIO S3-compatible object storage
  minioserver:
    image: quay.io/minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: minioserver
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - data-lakehouse

  # Nessie Catalog
  nessie:
    image: ghcr.io/projectnessie/nessie:0.67.0
    container_name: nessie
    ports:
      - "19120:19120"
    networks:
      - data-lakehouse

  # Dremio Query Engine
  dremio:
    image: dremio/dremio-oss:latest
    container_name: dremio
    ports:
      - "9047:9047"
      - "31010:31010"
      - "32010:32010"
    volumes:
      - dremio_data:/opt/dremio/data
    networks:
      - data-lakehouse

  # Apache Superset
  superset:
    image: apache/superset:latest
    container_name: superset
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: supersecretkey123
    volumes:
      - superset_data:/app/superset_home
    networks:
      - data-lakehouse

  # Jupyter Notebook
  jupyter:
    image: jupyter/all-spark-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "lakehouse123"
    volumes:
      - jupyter_data:/home/jovyan/work
      - ./notebooks:/home/jovyan/work/notebooks
    networks:
      - data-lakehouse

  # Apache Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.8.0
    container_name: airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__FERNET_KEY: "81HqDtbqAywKSOumSha3BhWNOdQ26slT6K0YaZeZyPs="
      AIRFLOW__WEBSERVER__SECRET_KEY: "airflow_secret_key"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: "airflow"
      _AIRFLOW_WWW_USER_PASSWORD: "airflow123"
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - airflow_data:/opt/airflow
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin123 &&
      airflow webserver"
    networks:
      - data-lakehouse

  # Apache Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.8.0
    container_name: airflow-scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__FERNET_KEY: "81HqDtbqAywKSOumSha3BhWNOdQ26slT6K0YaZeZyPs="
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - airflow_data:/opt/airflow
    command: airflow scheduler
    depends_on:
      - airflow-webserver
    networks:
      - data-lakehouse

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - data-lakehouse

volumes:
  minio_data:
  dremio_data:
  superset_data:
  jupyter_data:
  airflow_data:
  pgadmin_data:

networks:
  data-lakehouse:
    driver: bridge 