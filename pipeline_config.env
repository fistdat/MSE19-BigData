#!/bin/bash
# =============================================================================
# CDC LAKEHOUSE PIPELINE - UNIFIED CONFIGURATION PROFILE
# =============================================================================
# This file contains all credentials, endpoints, and configuration settings
# Source this file in other scripts: source pipeline_config.env
# =============================================================================

echo "üîß Loading CDC Lakehouse Pipeline Configuration..."

# =============================================================================
# POSTGRESQL DATABASE CONFIGURATION
# =============================================================================
export PG_HOST="postgres"
export PG_PORT="5432"
export PG_USER="admin"
export PG_PASSWORD="admin123"
export PG_DATABASE="demographics"
export PG_SCHEMA="public"
export PG_TABLE="demographics"
export PG_JDBC_URL="jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DATABASE}"

# PostgreSQL CDC Configuration
export PG_REPLICATION_SLOT="debezium_slot"
export PG_PUBLICATION="demographics_publication"
export PG_WAL_LEVEL="logical"

# =============================================================================
# KAFKA MESSAGE BROKER CONFIGURATION
# =============================================================================
export KAFKA_BOOTSTRAP_SERVERS="kafka:9092"
export KAFKA_BOOTSTRAP_SERVERS_EXTERNAL="localhost:9092"
export KAFKA_CDC_TOPIC="demographics_server.public.demographics"
export KAFKA_CONSUMER_GROUP="flink-cdc-consumer"
export KAFKA_CONSUMER_GROUP_TEST="flink-test-consumer"

# Kafka UI
export KAFKA_UI_URL="http://localhost:8082"

# =============================================================================
# DEBEZIUM CDC CONNECTOR CONFIGURATION
# =============================================================================
export DEBEZIUM_CONNECT_URL="http://localhost:8083"
export DEBEZIUM_CONNECTOR_NAME="demographics-connector"
export DEBEZIUM_SERVER_NAME="demographics_server"
export DEBEZIUM_PLUGIN_NAME="pgoutput"

# =============================================================================
# MINIO OBJECT STORAGE CONFIGURATION
# =============================================================================
export MINIO_ENDPOINT="http://minioserver:9000"
export MINIO_ENDPOINT_EXTERNAL="http://localhost:9000"
export MINIO_ACCESS_KEY="DKZjmhls7nwxBN4GJfXC"
export MINIO_SECRET_KEY="kNuAZodphLEGKHv5EmbyiDt1v5eT0yVErjVFyg0t"
export MINIO_CONSOLE_URL="http://localhost:9001"
export MINIO_CONSOLE_USER="minioadmin"
export MINIO_CONSOLE_PASSWORD="minioadmin123"

# MinIO Buckets
export MINIO_WAREHOUSE_BUCKET="warehouse"
export MINIO_CHECKPOINTS_BUCKET="checkpoints"

# S3A Configuration for Flink/Iceberg
export S3A_ENDPOINT="http://minioserver:9000"
export S3A_ACCESS_KEY="${MINIO_ACCESS_KEY}"
export S3A_SECRET_KEY="${MINIO_SECRET_KEY}"
export S3A_PATH_STYLE_ACCESS="true"

# =============================================================================
# NESSIE CATALOG CONFIGURATION
# =============================================================================
export NESSIE_URL="http://nessie:19120/api/v1"
export NESSIE_URL_EXTERNAL="http://localhost:19120/api/v1"
export NESSIE_REF="main"
export NESSIE_WAREHOUSE="s3a://warehouse/"

# =============================================================================
# ICEBERG CONFIGURATION
# =============================================================================
export ICEBERG_CATALOG_TYPE="nessie"
export ICEBERG_CATALOG_IMPL="org.apache.iceberg.nessie.NessieCatalog"
export ICEBERG_WAREHOUSE="${NESSIE_WAREHOUSE}"
export ICEBERG_IO_IMPL="org.apache.iceberg.aws.s3.S3FileIO"
export ICEBERG_DATABASE="lakehouse"
export ICEBERG_TABLE="demographics_final"

# =============================================================================
# FLINK CONFIGURATION
# =============================================================================
export FLINK_JOBMANAGER_URL="http://localhost:8081"
export FLINK_JOBMANAGER_HOST="jobmanager"
export FLINK_TASKMANAGER_HOST="taskmanager"

# Flink Execution Configuration
export FLINK_CHECKPOINTING_INTERVAL="60sec"
export FLINK_CHECKPOINTING_MODE="EXACTLY_ONCE"
export FLINK_CHECKPOINTING_TIMEOUT="10min"
export FLINK_STATE_BACKEND="filesystem"
export FLINK_CHECKPOINTS_DIR="s3a://checkpoints/"
export FLINK_SAVEPOINTS_DIR="s3a://checkpoints/savepoints/"

# =============================================================================
# DREMIO QUERY ENGINE CONFIGURATION
# =============================================================================
export DREMIO_URL="http://localhost:9047"
export DREMIO_USER="admin"
export DREMIO_PASSWORD="admin123"
export DREMIO_MINIO_SOURCE_NAME="minio-s3"
export DREMIO_NESSIE_SOURCE_NAME="nessie-catalog"

# =============================================================================
# AWS ENVIRONMENT VARIABLES (for S3A compatibility)
# =============================================================================
export AWS_REGION="us-east-1"
export AWS_ACCESS_KEY_ID="${MINIO_ACCESS_KEY}"
export AWS_SECRET_ACCESS_KEY="${MINIO_SECRET_KEY}"

# =============================================================================
# CONTAINER NAMES
# =============================================================================
export CONTAINER_POSTGRES="postgres"
export CONTAINER_KAFKA="kafka"
export CONTAINER_MINIO="minioserver"
export CONTAINER_NESSIE="nessie"
export CONTAINER_FLINK_JM="jobmanager"
export CONTAINER_FLINK_TM="taskmanager"
export CONTAINER_DREMIO="dremio"
export CONTAINER_DEBEZIUM="debezium"

# =============================================================================
# VALIDATION FUNCTIONS
# =============================================================================

# Function to test PostgreSQL connection
test_postgresql() {
    echo "üîç Testing PostgreSQL connection..."
    docker exec ${CONTAINER_POSTGRES} psql -U ${PG_USER} -d ${PG_DATABASE} -c "SELECT current_user, current_database();" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ PostgreSQL connection successful"
        return 0
    else
        echo "‚ùå PostgreSQL connection failed"
        return 1
    fi
}

# Function to test Kafka connection
test_kafka() {
    echo "üîç Testing Kafka connection..."
    docker exec ${CONTAINER_KAFKA} kafka-topics --bootstrap-server ${KAFKA_BOOTSTRAP_SERVERS} --list > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ Kafka connection successful"
        return 0
    else
        echo "‚ùå Kafka connection failed"
        return 1
    fi
}

# Function to test MinIO connection
test_minio() {
    echo "üîç Testing MinIO connection..."
    docker exec ${CONTAINER_MINIO} mc ls minio > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ MinIO connection successful"
        return 0
    else
        echo "‚ùå MinIO connection failed"
        return 1
    fi
}

# Function to test Nessie connection
test_nessie() {
    echo "üîç Testing Nessie connection..."
    curl -s ${NESSIE_URL_EXTERNAL}/repositories > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ Nessie connection successful"
        return 0
    else
        echo "‚ùå Nessie connection failed"
        return 1
    fi
}

# Function to test Flink connection
test_flink() {
    echo "üîç Testing Flink connection..."
    curl -s ${FLINK_JOBMANAGER_URL}/overview > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ Flink connection successful"
        return 0
    else
        echo "‚ùå Flink connection failed"
        return 1
    fi
}

# Function to test Dremio connection
test_dremio() {
    echo "üîç Testing Dremio connection..."
    curl -s ${DREMIO_URL} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ Dremio connection successful"
        return 0
    else
        echo "‚ùå Dremio connection failed"
        return 1
    fi
}

# Function to test all connections
test_all_connections() {
    echo "üîç Testing all pipeline connections..."
    echo "======================================"
    
    local failed=0
    
    test_postgresql || failed=$((failed + 1))
    test_kafka || failed=$((failed + 1))
    test_minio || failed=$((failed + 1))
    test_nessie || failed=$((failed + 1))
    test_flink || failed=$((failed + 1))
    test_dremio || failed=$((failed + 1))
    
    echo ""
    if [ $failed -eq 0 ]; then
        echo "‚úÖ All connections successful!"
        return 0
    else
        echo "‚ùå $failed connection(s) failed"
        return 1
    fi
}

# Function to display configuration summary
show_config() {
    echo "üìã CDC LAKEHOUSE PIPELINE CONFIGURATION"
    echo "======================================="
    echo "PostgreSQL: ${PG_USER}@${PG_HOST}:${PG_PORT}/${PG_DATABASE}"
    echo "Kafka: ${KAFKA_BOOTSTRAP_SERVERS_EXTERNAL}"
    echo "MinIO: ${MINIO_ENDPOINT_EXTERNAL}"
    echo "Nessie: ${NESSIE_URL_EXTERNAL}"
    echo "Flink: ${FLINK_JOBMANAGER_URL}"
    echo "Dremio: ${DREMIO_URL}"
    echo ""
    echo "CDC Topic: ${KAFKA_CDC_TOPIC}"
    echo "Warehouse: ${NESSIE_WAREHOUSE}"
    echo "Iceberg Table: ${ICEBERG_DATABASE}.${ICEBERG_TABLE}"
    echo "======================================="
}

# =============================================================================
# INITIALIZATION
# =============================================================================

# Display configuration when sourced
if [ "${BASH_SOURCE[0]}" != "${0}" ]; then
    echo "‚úÖ Pipeline configuration loaded successfully!"
    echo "   Use 'show_config' to display settings"
    echo "   Use 'test_all_connections' to validate connectivity"
fi

# Export all functions
export -f test_postgresql test_kafka test_minio test_nessie test_flink test_dremio test_all_connections show_config 